/* $begin code-yso */
/* $begin code-ysa */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Source block
src:
	.long 0x00a
	.long 0x0b0
	.long 0xc00
# Destination block
dest:
	.long 0x111
	.long 0x222
	.long 0x333

Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl $3, %ebx
	pushl %ebx
	irmovl dest, %ebx
	pushl %ebx
	irmovl src, %ebx
	pushl %ebx
	call Copy		# Copy(int *src, int *dest, int len)
	rrmovl %ebp,%esp
	popl %ebp
	ret 

/* $begin sum-ys 0 */
	# int Copy(int *src, int *dest, int len)
Copy:	pushl %ebp
	rrmovl %esp,%ebp
	irmovl $16, %esi
	subl %esi, %esp
	xorl %ebx, %ebx		# set the result to 0
	jmp Len
# While the len is greater than 0, copy the src to dest and 
# calculate the xor checksum
Loop:	mrmovl 8(%ebp),%eax
	mrmovl (%eax),%eax
	rmmovl %eax, -4(%ebp)
	irmovl $4, %esi
	mrmovl 8(%ebp), %eax
	addl %esi, %eax
	rmmovl %eax, 8(%ebp)
	mrmovl 12(%ebp),%eax
	mrmovl -4(%ebp), %edx
	rmmovl %edx, (%eax)
	mrmovl 12(%ebp),%ecx
	addl %esi, %ecx
	rmmovl %ecx, 12(%ebp)
	xorl %edx,%ebx
	irmovl $1,%esi
	mrmovl 16(%ebp),%ecx
	subl %esi, %ecx
	rmmovl %ecx, 16(%ebp)
# Checks whether the len is 0
Len:	mrmovl 16(%ebp),%ecx
	andl %ecx, %ecx
	jne Loop
End:	rrmovl %ebx, %eax
	rrmovl %ebp,%esp
	popl %ebp
	ret
/* $end sum-ys 0 */

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
/* $end code-ysa */
/* $end code-yso */